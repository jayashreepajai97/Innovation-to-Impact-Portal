using IdeaDatabase.Requests;
using IdeaDatabase.Responses;
using IdeaDatabase.Utils.IImplementation;
using IdeaDatabase.Utils.Interface;
using Hpcs.DependencyInjector;
using InnovationPortalService.Filters;
using InnovationPortalService.Requests;
using Swashbuckle.Swagger.Annotations;
using System.Web.Http;

namespace InnovationPortalService.Controllers
{
    [HPIDEnable]
    //[RoutePrefix("api/v1/admin")]
    public class RESTAPIAdminController : RESTAPIControllerBase
    {
        private IRoleUtils roleUtils = DependencyInjector.Get<IRoleUtils, RoleUtils>();      
        private IUsersUtils usersUtils = DependencyInjector.Get<IUsersUtils, UsersUtils>();        
        private readonly IideaCategoryUtils IdeaCategoryUtils = DependencyInjector.Get<IideaCategoryUtils, IdeaCategoryUtils>();
        private readonly IChallengeUtils IdeaChallengeUtils = DependencyInjector.Get<IChallengeUtils, ChallengeUtils>();

        /// <summary>
        /// This API is used for Adding Role to User.
        /// </summary>
        /// <param name="req">Request must required the parameter RoleId and In Authorization  Field must requird SessionToken and CallerID which is generated by Authenticate API.</param>
        /// <response code="200">Successfully processed - Check ErrorList for possible errors</response>
        /// <response code="400">Invalid JSON - Syntax error in request body</response>
        /// <returns>RestAPIAddRoleResponse</returns>
        [HttpPost]
        [Route("users/role")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [CredentialsHeader]
        public RestAPIAddRoleResponse AddRoleToUser(RestAPIAddRoleRequest req)
        {
            RestAPIAddRoleResponse response = new RestAPIAddRoleResponse();
            roleUtils.InsertRoleMapping(response, UserID, req.RoleId);
            return response;
        }

        //[HttpPost]
        //[Route("idea/status")]
        ////[SwaggerOperation(Tags = new[] { "Admin" })]
        //[CredentialsHeader]
        //public RestAPIAddStatusResponse AddIdeaStatus(RestAPIAddStatusRequest req)
        //{
        //    RestAPIAddStatusResponse response = new RestAPIAddStatusResponse();
        //    statusUtils.InsertStatus(response, req.Status, UserID);

        //    return response;
        //}

        /// <summary>
        /// This API is used for searching user.
        /// </summary>
        /// <param name="SearchName">Request must required the parameter SearchName and In Authorization  Field must requird SessionToken and CallerID which is generated by Authenticate API.</param>
        /// <response code="200">Successfully processed - Check ErrorList for possible errors</response>
        /// <response code="400">Invalid JSON - Syntax error in request body</response>
        /// <returns>RestAPISearchUserResponse</returns>
        [HttpGet]
        [Route("users/search")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [CredentialsHeader]
        public RestAPISearchUserResponse SearchUser([FromUri] string SearchName)
        {
            RestAPISearchUserResponse response = new RestAPISearchUserResponse();
            usersUtils.SearchUser(response, SearchName);

            return response;
        }

        /// <summary>
        /// This API is used for Deleting Idea category.
        /// </summary>
        /// <param name="CategoryId">Request must required the parameter Category and In Authorization  Field must requird SessionToken and CallerID which is generated by Authenticate API.</param>
        /// <response code="200">Successfully processed - Check ErrorList for possible errors</response>
        /// <response code="400">Invalid JSON - Syntax error in request body</response>
        /// <returns>RestAPIDeleteIdeaCategoryResponse</returns>
        [HttpDelete]
        [Route("categories/{CategoryId}")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [CredentialsHeader]
        [AllowEmptyBodyAttribute]
        public RestAPIDeleteIdeaCategoryResponse DeleteCategory([FromUri] int CategoryId)
        {
            RestAPIDeleteIdeaCategoryResponse response = new RestAPIDeleteIdeaCategoryResponse();
            IdeaCategoryUtils.DeleteCategory(response, CategoryId, UserID);
            return response;
        }

        /// <summary>
        /// This API is used for fetching Idea category.
        /// </summary>
        /// <response code="200">Successfully processed - Check ErrorList for possible errors</response>
        /// <response code="400">Invalid JSON - Syntax error in request body</response>
        /// <returns>RestAPIGetIdeaCategoryResponse</returns>
        [HttpGet]
        [Route("categories")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [CredentialsHeader]
        public RestAPIGetIdeaCategoryResponse GetCategories()
        {
            RestAPIGetIdeaCategoryResponse response = new RestAPIGetIdeaCategoryResponse();
            IdeaCategoryUtils.GetCategory(response);
            return response;
        }

        /// <summary>
        /// This API is used for Adding Idea category.
        /// </summary>
        /// <param name="Category">Request must required the parameter CategoriesName and In Authorization Field must requird SessionToken and CallerID which is generated by Authenticate API.</param>
        /// <response code="200">Successfully processed - Check ErrorList for possible errors</response>
        /// <response code="400">Invalid JSON - Syntax error in request body</response>
        /// <returns>RestAPIAddIdeaCategoryResponse</returns>
        [HttpPost]
        [Route("categories")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [CredentialsHeader]
        [AllowEmptyBodyAttribute]
        public RestAPIAddIdeaCatrgoryResponse AddCategory([FromUri] string Category) //string CategoryName
        {
            RestAPIAddIdeaCatrgoryResponse response = new RestAPIAddIdeaCatrgoryResponse();
            IdeaCategoryUtils.InsertCategory(response, Category, UserID);
            return response;
        }

        /// <summary>
        /// This API is used for updating the Idea category.
        /// </summary>
        /// <param name="req">Request must required Category and ID and in  Authorization  Field SessionToken and CallerID which is generated by Authenticate API.</param>
        /// <response code="200">Successfully processed - Check ErrorList for possible errors</response>
        /// <response code="400">Invalid JSON - Syntax error in request body</response>
        /// <returns>RestAPIUpdateCategoryResponse</returns>
        [HttpPut]
        [Route("categories")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [CredentialsHeader]
        public RestAPIUpdateCategoryResponse UpdateCategory(RestAPICatrgoryRequest req)
        {
            RestAPIUpdateCategoryResponse response = new RestAPIUpdateCategoryResponse();
            IdeaCategoryUtils.UpdateCategory(response, req.Category, req.ID);
            return response;
        }

        /// <summary>
        /// This API is used for Adding a new challenge.
        /// </summary>
        /// <param name="ChallengeName">Request must required the parameter CategoriesName and In Authorization Field must requird SessionToken and CallerID which is generated by Authenticate API.</param>
        /// <response code="200">Successfully processed - Check ErrorList for possible errors</response>
        /// <response code="400">Invalid JSON - Syntax error in request body</response>
        /// <returns>RestAPIAddIdeaChallengeResponse</returns>
        [HttpPost]
        [Route("challenges")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [CredentialsHeader]
        [AllowEmptyBodyAttribute]
        public RestAPIAddIdeaChallengeResponse AddChallenge([FromUri] string ChallengeName) 
        {
            RestAPIAddIdeaChallengeResponse response = new RestAPIAddIdeaChallengeResponse();
            IdeaChallengeUtils.InsertChallenge(response, ChallengeName, UserID);

            return response;
        }

        /// <summary>
        /// This API is used for fetching idea challenges.
        /// </summary>
        /// <response code="200">Successfully processed - Check ErrorList for possible errors</response>
        /// <response code="400">Invalid JSON - Syntax error in request body</response>
        /// <returns>RestAPIGetIdeaChallengeResponse</returns>
        [HttpGet]
        [Route("challenges")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [CredentialsHeader]
        public RestAPIGetIdeaChallengeResponse GetChallenges()
        {
            RestAPIGetIdeaChallengeResponse response = new RestAPIGetIdeaChallengeResponse();
            IdeaChallengeUtils.GetChallenges(response);

            return response;
        }

        [HttpOptions]
        [Route("users/role")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void AddRoleToUser() { }

        //[HttpOptions]
        //[Route("idea/status")]
        //[SwaggerOperation(Tags = new[] { "Admin" })]
        //[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        //public void AddIdeaStatus() { }

        [HttpOptions]
        [Route("users/search")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void SearchUser() { }

        [HttpOptions]
        [Route("categories")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void AddCategory() { }

        [HttpOptions]
        [Route("categories/{CategoryId}")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void DeleteCategory() { }

        [HttpOptions]
        [Route("categories")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void GetCategory() { }

        [HttpOptions]
        [Route("categories")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void UpdateCategory() { }

        [HttpOptions]
        [Route("challenges")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void AddChallenge() { }

        [HttpOptions]
        [Route("challenges")]
        [SwaggerOperation(Tags = new[] { "Admin" })]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void Getchallenges() { }

    }

}

